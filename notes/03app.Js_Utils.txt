in app.js we basically configure some middleware some are following 

app.use(cors({
    origin: process.env.CORS_ORIGIN,
    credentials: true
}))

app.use(express.json({limit:"16kb"}))
app.use(express.urlencoded({extended: true, limit: "16kb"}))
app.use(express.static("public"))
app.use(cookieParser())

express: Express is a web application framework for Node.js, providing a robust set of features to develop web and mobile applications.

cors: CORS (Cross-Origin Resource Sharing) middleware enables cross-origin requests from a web application in one domain to resources in another domain. It helps in securing the server by controlling which domains can access its resources.

cookie-parser: Cookie-parser middleware parses cookies attached to the client request object, making them available as an object on req.cookies. It simplifies handling HTTP cookies in Node.js applications.

express.json(): This middleware parses incoming requests with JSON payloads. It ensures that the data sent from the client in the request body is parsed and available as req.body.

express.urlencoded(): This middleware parses incoming requests with URL-encoded payloads. It parses the data sent from the client as URL-encoded data and makes it available as req.body.

express.static(): This middleware serves static files and assets such as HTML, CSS, images, etc., from the specified directory. It's commonly used to serve static files like stylesheets, scripts, and images.



asynchandler file 

 asyncHandler function is used to wrap asynchronous route handlers to simplify error handling. It ensures that any errors thrown in the route handlers are caught and properly handled, preventing the server from crashing and providing consistent error responses to clients.

 apiError file

 This custom error class is useful for creating consistent error objects in your application. It allows you to specify the HTTP status code, error message, and additional error details when throwing errors within your code. This can make error handling and debugging easier and more structured.

 apiResponse file

 This class is useful for structuring and standardizing the responses sent back from your API endpoints. It encapsulates the response data in an object with consistent properties (statusCode, data, message, and success), making it easier to work with and ensuring a uniform response format across your application.
